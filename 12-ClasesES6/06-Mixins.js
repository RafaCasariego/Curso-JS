// ðŸ”¹ MIXINS en JavaScript (ES6+)

// ðŸ”¹ Â¿QuÃ© es un Mixin?
// Un **Mixin** es una forma de compartir funcionalidades entre clases
// SIN usar herencia. En lugar de extender una sola clase, podemos 
// agregar mÃ©todos y propiedades a mÃºltiples clases sin modificar 
// la jerarquÃ­a de herencia.

// ðŸ“Œ Se usan cuando varias clases necesitan compartir lÃ³gica comÃºn,
// pero sin tener que extender una clase base (como en la herencia).


// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€


// ðŸ”¹ Ejemplo 1: Creando un Mixin
const LoggerMixin = {
    log() {
        console.log(`[LOG] ${this.name} ha ejecutado una acciÃ³n.`);
    }
};

// ðŸ”¹ Clase base
class User {
    constructor(name) {
        this.name = name;
    }
}

// ðŸ“Œ Usamos `Object.assign()` para mezclar el mixin en el prototipo de la clase
Object.assign(User.prototype, LoggerMixin);

// âœ… Prueba
const user = new User("Rafa");
user.log(); // "[LOG] Rafa ha ejecutado una acciÃ³n."


// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€


// ðŸ”¹ Ejemplo 2: MÃºltiples Mixins
const EatableMixin = {
    eat() {
        console.log(`${this.name} estÃ¡ comiendo.`);
    }
};

const SleepableMixin = {
    sleep() {
        console.log(`${this.name} estÃ¡ durmiendo.`);
    }
};

// ðŸ”¹ Clase base Animal
class Animal {
    constructor(name) {
        this.name = name;
    }
}

// ðŸ“Œ Agregar mÃºltiples Mixins a la clase Animal
Object.assign(Animal.prototype, EatableMixin, SleepableMixin);

// âœ… Prueba
const perro = new Animal("Rocky");
perro.eat();   // "Rocky estÃ¡ comiendo."
perro.sleep(); // "Rocky estÃ¡ durmiendo."


// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€



